proxy:
  secretToken: "some-secret"
  service:
    type: NodePort
  chp:
    image:
      name: jupyterhub/jupyter-proxy
      tag: dev


hub:
  image:
    name: jupyterhub/jupyterhub
    tag: dev
  extraConfig:
    customConfig: |
      c.Spawner.cmd = ["jupyter-labhub"]
      from jupyterhub.auth import DummyAuthenticator
      c.JupyterHub.authenticator_class = DummyAuthenticator
      c.DummyAuthenticator.password = "password"
      c.JupyterHub.shutdown_on_logout = True

    cullConfig: |
      from jupyterhub_idle_culler import cull_idle_servers

      c.JupyterHub.load_roles = [{
          "name": "idle-culler",
          "scopes": ["read:users", "read:servers", "delete:servers"],
          "services": ["idle-culler"],
      }]

      c.JupyterHub.services = [
          {
              "name": "idle-culler",
              "admin": True,
              "command": [
                  "python3", "-m", "jupyterhub_idle_culler",
                  "--timeout=900",
                  "--cull-every=60",
                  "--cull-users",
                  "--remove-named-servers",
              ],
          }


singleuser:
  image: 
    name: jupyterhub/jupyter-singleuser
    tag: dev
  storage:
    type: dynamic
    dynamic:
      storageClass: standard
  extraEnv:
    USER: "{username}"

cull:
  enabled: true
  timeout: 900       # 15 minutes
  every: 60          # check every 60 seconds
  users: true        # cull even if the user is still logged in
  removeNamedServers: true

ingress:
  enabled: true
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
  hosts:
    - jupyterhub.local
  tls:
    - secretName: jupyterhub-tls
      hosts:
        - jupyterhub.local


